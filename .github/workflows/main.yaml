name: CI/CD Pipeline
on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_SERVICE: ${{ secrets.EMAIL_SERVICE }}
          ORIGINS_URL: ${{ secrets.ORIGINS_URL }}
          FLASK_ENV: ${{ secrets.FLASK_ENV }}
          REACT_APP_EDITOR_KEY: ${{ secrets.REACT_APP_EDITOR_KEY }}
          REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
        run: |
          # Create backend .env file
          cat << EOF > flask-backend/.env
          SECRET_KEY=$SECRET_KEY
          DATABASE_URL=$DATABASE_URL
          JWT_SECRET_KEY=$JWT_SECRET_KEY
          EMAIL_USER=$EMAIL_USER
          EMAIL_PASSWORD=$EMAIL_PASSWORD
          EMAIL_PORT=$EMAIL_PORT
          EMAIL_SERVICE=$EMAIL_SERVICE
          ORIGINS_URL=$ORIGINS_URL
          FLASK_ENV=$FLASK_ENV
          EOF

          # Create frontend .env file
          cat << EOF > react-frontend/.env
          REACT_APP_EDITOR_KEY=$REACT_APP_EDITOR_KEY
          REACT_APP_API_BASE_URL=$REACT_APP_API_BASE_URL
          PORT=5000
          EOF

          docker compose build
          docker compose push

      - name: Check SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            echo "SSH connection test successful"
            whoami
            pwd

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/opc/savory-script/
            git pull origin master

            # Create backend .env file
            cat << EOF > flask-backend/.env
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            EMAIL_USER=${{ secrets.EMAIL_USER }}
            EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
            EMAIL_PORT=${{ secrets.EMAIL_PORT }}
            EMAIL_SERVICE=${{ secrets.EMAIL_SERVICE }}
            ORIGINS_URL=${{ secrets.ORIGINS_URL }}
            FLASK_ENV=${{ secrets.FLASK_ENV }}
            EOF

            # Create frontend .env file
            cat << EOF > react-frontend/.env
            REACT_APP_EDITOR_KEY=${{ secrets.REACT_APP_EDITOR_KEY }}
            REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
            PORT=5000
            EOF

            # Pull and start containers
            docker compose pull
            docker compose up -d --build

            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            docker compose exec db sh -c 'while ! pg_isready -h "localhost" -p "5432" > /dev/null 2>&1; do sleep 1; done'

            # Run migrations
            docker compose exec backend sh -c 'flask db upgrade'

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/opc/savory-script/
            docker compose ps
            docker compose logs --tail=50
